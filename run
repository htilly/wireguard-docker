#!/bin/bash


# Find a Wireguard interface
interfaces=`find /etc/wireguard -type f`
if [[ -z $interfaces ]]; then
    echo "$(date): Interface not found in /etc/wireguard" >&2
    exit 1
fi


for interface in $interfaces; do
    echo "$(date): Starting Wireguard $interface"
    wg-quick up $interface


# Add masquerade rule for NAT'ing VPN traffic bound for the Internet
if [[ $IPTABLES_MASQ -eq 1 ]]; then
    echo "$(date): ---INFO---  Adding iptables NAT rule"
    iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
fi

### Fix route back to local network
if [[ -z $LOCAL_NETWORK ]]; then
    echo "$(date): ---INFO--- No network provides. Ignoring route back to local network"
else
    echo "$(date): ---INFO---  Adding route back to local network: $LOCAL_NETWORK"
    gw=$(ip route |awk '/default/ {print $3}')
    ip route add to $LOCAL_NETWORK via $gw dev eth0
fi


## Get the endpoint IP in the wg config
endpoint_in_conf=$(grep -Po 'Endpoint\s=\s\K[^:]*' /etc/wireguard/wg0.conf | ( read hostname ;dig $hostname +short ))


function finish  {
    echo "$(date): Shutting down vpn"
    wg-quick down wgnet0
}


## Get the active endpoint from WireGuard
function active_wg {
        active_endpoint=$( wg | grep -Po 'endpoint:\s\K[^:]*')
}


trap finish SIGTERM SIGINT SIGQUIT

active_wg
#echo "$(date): ---INFO---  Endpoint in config: $endpoint_in_conf"
#echo "$(date): ---INFO---  Active EndPoint : $active_endpoint"

# Every minute we check to our IP address
 while [[ $endpoint_in_conf == $active_endpoint ]];
do

# Update the active wg endpoint ip
active_wg

# For debug printing endpoints
echo "$(date): ---INFO---  Endpoint in config: $endpoint_in_conf"
echo "$(date): ---INFO---  Active EndPoint : $active_endpoint"
            sleep 10;
done
done

echo "$(date): Expected endpoint not found in WireGuard. Shuting down!!"
